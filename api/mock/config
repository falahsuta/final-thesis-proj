// Code generated by MockGen. DO NOT EDIT.
// Source: .\api\Interfaces\config\ckks.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfigInterface is a mock of ConfigInterface interface.
type MockConfigInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigInterfaceMockRecorder
}

// MockConfigInterfaceMockRecorder is the mock recorder for MockConfigInterface.
type MockConfigInterfaceMockRecorder struct {
	mock *MockConfigInterface
}

// NewMockConfigInterface creates a new mock instance.
func NewMockConfigInterface(ctrl *gomock.Controller) *MockConfigInterface {
	mock := &MockConfigInterface{ctrl: ctrl}
	mock.recorder = &MockConfigInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigInterface) EXPECT() *MockConfigInterfaceMockRecorder {
	return m.recorder
}

// GetBootstrappingMode mocks base method.
func (m *MockConfigInterface) GetBootstrappingMode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBootstrappingMode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBootstrappingMode indicates an expected call of GetBootstrappingMode.
func (mr *MockConfigInterfaceMockRecorder) GetBootstrappingMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootstrappingMode", reflect.TypeOf((*MockConfigInterface)(nil).GetBootstrappingMode))
}

// GetNTTMode mocks base method.
func (m *MockConfigInterface) GetNTTMode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNTTMode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNTTMode indicates an expected call of GetNTTMode.
func (mr *MockConfigInterfaceMockRecorder) GetNTTMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNTTMode", reflect.TypeOf((*MockConfigInterface)(nil).GetNTTMode))
}

// ProvideConfig mocks base method.
func (m *MockConfigInterface) ProvideConfig() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProvideConfig")
}

// ProvideConfig indicates an expected call of ProvideConfig.
func (mr *MockConfigInterfaceMockRecorder) ProvideConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideConfig", reflect.TypeOf((*MockConfigInterface)(nil).ProvideConfig))
}
